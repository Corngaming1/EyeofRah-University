
# System Requirements

## Table of Contents
1. [Functional Requirements](#functional-requirements)
2. [Non-Functional Requirements](#non-functional-requirements)
3. [Architecture Design](#architecture-design)
4. [Development Guidelines](#development-guidelines)
5. [Version Control](#version-control)
6. [Testing Guidelines](#testing-guidelines)
7. [Deployment Instructions](#deployment-instructions)
8. [Glossary](#glossary)

---

## Functional Requirements
1. **Course Management**: 
    - Add, edit, delete, and view courses.
    - Example: `POST /courses` to create a new course.
2. **Student Management**: 
    - Enroll students, update student details.
    - Example: `PUT /students/{id}` to update student information.
3. **Faculty Management**: 
    - Assign instructors to courses.
    - Example: `POST /courses/{id}/instructors` to assign an instructor.
4. **Grade Management**: 
    - Record and calculate student grades.
    - Example: `POST /grades` to record a grade.
5. **Authentication System**: 
    - User login and role-based access control.
    - Example: `POST /login` for user authentication.
6. **Reporting System**: 
    - Generate reports (grades, student lists, etc.).
    - Example: `GET /reports/grades` to generate grade reports.

## Non-Functional Requirements
1. **Scalability**: 
    - System should handle an increasing number of courses and users.
    - Example: Support up to 10,000 concurrent users.
2. **Security**: 
    - User authentication and access control.
    - Example: Use encryption for sensitive data.
3. **Usability**: 
    - User-friendly interface for administrators and students.
    - Example: Intuitive navigation and responsive design.
4. **Maintainability**: 
    - Code should be modular and well-documented.
    - Example: Use docstrings and comments in the code.

---

## Architecture Design

### Overview
- The system follows a **modular structure**, separating backend logic, frontend UI (if applicable), and documentation.
- **No SQL databases are used**, relying on **file-based storage** for data persistence.

### Architecture Diagram
![Architecture Diagram](path/to/diagram.png) 

### Components
1. **Backend** (Python-based)
   - Handles course, student, and faculty operations.
2. **Frontend** (If applicable)
   - Provides user interface for managing the system.
3. **Storage Layer**
   - Uses JSON or other file-based storage instead of SQL.
4. **Authentication**
   - Implements role-based access for administrators and users.

---

## Development Guidelines

### Coding Standards
- Follow **PEP 8** for Python code.
- Use meaningful function and variable names.
- Keep functions small and focused on a single task.

## Directory Structure
```
|___src
|   |___backend
|   |___frontend
|___docs
|___tests
```

## Commit Message Guidelines
- Use descriptive commit messages:
  ```
  feat: Added course creation feature
  fix: Resolved issue with student enrollment
  ```

## Branching Strategy
- `main`: Stable production-ready code.
- `develop`: Active development branch.
- `feature/*`: Individual features (e.g., `feature/course-management`).

---

##Version Control

## Workflow
1. **Create a feature branch**
   ```sh
   git checkout -b feature/course-management
   ```
2. **Commit changes**
   ```sh
   git add .
   git commit -m "feat: Implemented course CRUD operations"
   ```
3. **Push to GitHub**
   ```sh
   git push origin feature/course-management
   ```
4. **Merge to develop/main when ready**
   ```sh
   git checkout develop
   git merge feature/course-management
   ```
## Testing Guidelines

1. Unit Tests: Write tests for individual functions and modules.
2. Integration Tests: Test interactions between different components.
3. End-to-End Tests: Test the entire system from start to finish.
4. Run Tests: Use the following command to run tests:
```sh
pytest
```
## Deployment Instructions

1. Setup Environment: Install required dependencies
```sh
pip install -r requirements.txt
```
2. Run Migrations: If applicable, run database migrations.
```sh
python manage.py migrate
```
3. Start Server: Start the application server.
```sh
python manage.py runserver
```

## Glossary

#CRUD: Create, Read, Update, Delete.
#API: Application Programming Interface.
#PEP 8: Python Enhancement Proposal 8, a style guide for Python code.
#JSON: JavaScript Object Notation, a lightweight data-interchange format.
